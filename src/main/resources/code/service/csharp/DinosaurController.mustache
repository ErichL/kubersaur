using System.Collections.Generic;
using {{organisationPackage}}.{{organisationName}}.{{microserviceName}}.api.Api;
using {{organisationPackage}}.{{organisationName}}.{{microserviceName}}.api.Client;
using {{organisationPackage}}.{{organisationName}}.{{microserviceName}}.api.Model;
using Microsoft.Extensions.Logging;
using dotnet_microservice_support;
using System.Linq;

namespace Controllers
{
    public class DinosaurController : Abstract{{microserviceNameCamelCase}}DinosaurServiceApiSync
    {

        public DinosaurController(IClientFactory clientFactory)
        {
        }

        public override SuccessResponse CreateDinosaur (string id, Dinosaur dinosaur)
        {
            throw new System.NotImplementedException();
        }

        public override ApiResponse<SuccessResponse> CreateDinosaurWithHttpInfo (string id, Dinosaur dinosaur)
        {
            throw new System.NotImplementedException();
        }

        public override SuccessResponse DeleteDinosaur (string id)
        {
            throw new System.NotImplementedException();
        }
        public override ApiResponse<SuccessResponse> DeleteDinosaurWithHttpInfo (string id)
        {
            throw new System.NotImplementedException();
        }

        public override Dinosaur GetDinosaur (string id)
        {
            return new Dinosaur(){Title = "hello world {{microserviceName}}"};
        }
        public override ApiResponse<Dinosaur> GetDinosaurWithHttpInfo (string id)
        {
            throw new System.NotImplementedException();
        }
        public override SuccessResponse UpdateDinosaur (string id, Dinosaur dinosaur)
        {
            throw new System.NotImplementedException();
        }
        public override ApiResponse<SuccessResponse> UpdateDinosaurWithHttpInfo (string id, Dinosaur dinosaur)
        {
            throw new System.NotImplementedException();
        }
        public override IReadableConfiguration ConfigurationImpl { get => throw new System.NotImplementedException(); set => throw new System.NotImplementedException(); }
        public override ExceptionFactory ExceptionFactoryImpl { get => throw new System.NotImplementedException(); set => throw new System.NotImplementedException(); }

        public override string GetBasePath()
        {
            throw new System.NotImplementedException();
        }
    }
}